
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jan 18 02:12:13 CET 2022
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.Scanner;

import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jan 18 02:12:13 CET 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\005\000\002\002\004\000\002\002" +
    "\005\000\002\002\004\000\002\002\003\000\002\003\006" +
    "\000\002\003\006\000\002\003\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\003\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\004\000\002\021" +
    "\005\000\002\021\005\000\002\021\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\004\005\000" +
    "\002\004\005\000\002\004\003\000\002\007\013\000\002" +
    "\007\012\000\002\007\011\000\002\007\010\000\002\007" +
    "\007\000\002\007\006\000\002\007\005\000\002\007\004" +
    "\000\002\007\003\000\002\007\006\000\002\007\006\000" +
    "\002\007\005\000\002\007\004\000\002\007\006\000\002" +
    "\007\006\000\002\007\005\000\002\007\004\000\002\007" +
    "\003\000\002\013\005\000\002\013\005\000\002\013\004" +
    "\000\002\015\005\000\002\015\003\000\002\015\005\000" +
    "\002\016\005\000\002\016\003\000\002\016\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\003\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\005\000\002\012\005\000" +
    "\002\012\004\000\002\022\005\000\002\022\005\000\002" +
    "\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\006\003\005\004\006\001\002\000\004\002" +
    "\165\001\002\000\004\002\ufffd\001\002\000\006\003\010" +
    "\033\007\001\002\000\006\003\011\005\013\001\002\000" +
    "\004\002\ufffe\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\001\001\002\000\012\003\016\034\020\035\022\037" +
    "\021\001\002\000\024\003\044\005\013\007\034\010\045" +
    "\011\037\033\043\034\020\035\022\037\021\001\002\000" +
    "\006\003\024\033\023\001\002\000\012\002\ufffa\003\ufffa" +
    "\006\ufffa\027\ufffa\001\002\000\024\003\ufff7\005\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\033\ufff7\034\ufff7\035\ufff7\037\ufff7" +
    "\001\002\000\006\003\uffee\033\uffee\001\002\000\006\003" +
    "\uffed\033\uffed\001\002\000\006\003\uffef\033\uffef\001\002" +
    "\000\012\003\ufff0\026\ufff0\027\ufff0\031\ufff0\001\002\000" +
    "\026\003\ufff3\005\ufff3\007\ufff3\010\ufff3\011\ufff3\027\033" +
    "\033\ufff3\034\ufff3\035\ufff3\037\ufff3\001\002\000\010\003" +
    "\027\026\026\027\030\001\002\000\006\003\032\033\031" +
    "\001\002\000\024\003\ufff5\005\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\033\ufff5\034\ufff5\035\ufff5\037\ufff5\001\002\000\024" +
    "\003\ufff6\005\ufff6\007\ufff6\010\ufff6\011\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\037\ufff6\001\002\000\012\003\ufff2\026\ufff2" +
    "\027\ufff2\031\ufff2\001\002\000\012\003\ufff1\026\ufff1\027" +
    "\ufff1\031\ufff1\001\002\000\024\003\ufff4\005\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\033\ufff4\034\ufff4\035\ufff4\037\ufff4\001" +
    "\002\000\006\003\157\030\160\001\002\000\010\003\uffe1" +
    "\006\uffe1\027\uffe1\001\002\000\010\003\uffd8\006\uffd8\027" +
    "\uffd8\001\002\000\006\003\140\030\141\001\002\000\010" +
    "\003\133\006\135\027\134\001\002\000\024\003\ufff9\005" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\037\ufff9\001\002\000\010\003\uffea\006\uffea\027\uffea\001" +
    "\002\000\006\003\127\032\130\001\002\000\024\003\ufff8" +
    "\005\ufff8\007\ufff8\010\ufff8\011\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\037\ufff8\001\002\000\006\003\046\030\047\001\002" +
    "\000\010\003\uffd9\006\uffd9\027\uffd9\001\002\000\010\003" +
    "\060\030\051\033\056\001\002\000\010\003\123\026\122" +
    "\031\124\001\002\000\010\003\117\030\051\033\056\001" +
    "\002\000\040\003\uffcc\006\uffcc\012\102\013\107\016\uffcc" +
    "\017\uffcc\020\106\021\104\022\077\023\100\024\103\025" +
    "\101\026\uffcc\027\uffcc\031\uffcc\001\002\000\020\003\uffd3" +
    "\006\uffd3\016\074\017\uffd3\026\uffd3\027\uffd3\031\uffd3\001" +
    "\002\000\012\003\uffb4\017\071\026\uffb4\031\uffb4\001\002" +
    "\000\044\003\uffc1\006\uffc1\012\uffc1\013\uffc1\014\063\015" +
    "\064\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\027\uffc1\031\uffc1\001\002\000" +
    "\044\003\uffbb\006\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\031\uffbb\001\002\000\044" +
    "\003\uffbc\006\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\031\uffbc\001\002\000\010\003" +
    "\uffda\006\uffda\027\uffda\001\002\000\020\003\uffd0\006\uffd0" +
    "\016\uffd0\017\uffd0\026\uffd0\027\uffd0\031\uffd0\001\002\000" +
    "\044\003\uffba\006\uffba\012\uffba\013\uffba\014\uffba\015\uffba" +
    "\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\027\uffba\031\uffba\001\002\000\010" +
    "\003\070\030\051\033\056\001\002\000\010\003\066\030" +
    "\051\033\056\001\002\000\044\003\uffbe\006\uffbe\012\uffbe" +
    "\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\031\uffbe\001\002\000\044\003\uffbd\006\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\031" +
    "\uffbd\001\002\000\044\003\uffc0\006\uffc0\012\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\031\uffc0" +
    "\001\002\000\044\003\uffbf\006\uffbf\012\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\031\uffbf\001" +
    "\002\000\010\003\073\030\051\033\056\001\002\000\020" +
    "\003\uffd4\006\uffd4\016\074\017\uffd4\026\uffd4\027\uffd4\031" +
    "\uffd4\001\002\000\016\003\uffd2\006\uffd2\017\uffd2\026\uffd2" +
    "\027\uffd2\031\uffd2\001\002\000\010\003\076\030\051\033" +
    "\056\001\002\000\020\003\uffd1\006\uffd1\016\uffd1\017\uffd1" +
    "\026\uffd1\027\uffd1\031\uffd1\001\002\000\020\003\uffcf\006" +
    "\uffcf\016\uffcf\017\uffcf\026\uffcf\027\uffcf\031\uffcf\001\002" +
    "\000\010\003\uffc7\030\uffc7\033\uffc7\001\002\000\010\003" +
    "\uffc6\030\uffc6\033\uffc6\001\002\000\010\003\uffc8\030\uffc8" +
    "\033\uffc8\001\002\000\010\003\115\030\051\033\056\001" +
    "\002\000\010\003\uffc9\030\uffc9\033\uffc9\001\002\000\010" +
    "\003\uffca\030\uffca\033\uffca\001\002\000\010\003\113\030" +
    "\051\033\056\001\002\000\010\003\uffcb\030\uffcb\033\uffcb" +
    "\001\002\000\010\003\111\030\051\033\056\001\002\000" +
    "\044\003\uffc3\006\uffc3\012\uffc3\013\uffc3\014\063\015\064" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\031\uffc3\001\002\000\040" +
    "\003\uffc2\006\uffc2\012\uffc2\013\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\031\uffc2\001\002\000\024\003\uffce\006\uffce\012" +
    "\102\013\107\016\uffce\017\uffce\026\uffce\027\uffce\031\uffce" +
    "\001\002\000\020\003\uffcd\006\uffcd\016\uffcd\017\uffcd\026" +
    "\uffcd\027\uffcd\031\uffcd\001\002\000\044\003\uffc5\006\uffc5" +
    "\012\uffc5\013\uffc5\014\063\015\064\016\uffc5\017\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\031\uffc5\001\002\000\040\003\uffc4\006\uffc4\012" +
    "\uffc4\013\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\031\uffc4\001" +
    "\002\000\010\003\120\017\071\031\121\001\002\000\044" +
    "\003\uffb7\006\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\031\uffb7\001\002\000\044\003" +
    "\uffb8\006\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\031\uffb8\001\002\000\044\003\uffb9" +
    "\006\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\031\uffb9\001\002\000\010\003\126\030" +
    "\051\033\056\001\002\000\010\003\uffdb\006\uffdb\027\uffdb" +
    "\001\002\000\010\003\uffdc\006\uffdc\027\uffdc\001\002\000" +
    "\012\003\uffb6\017\071\026\uffb6\031\uffb6\001\002\000\010" +
    "\003\uffb5\026\uffb5\031\uffb5\001\002\000\010\003\uffd5\006" +
    "\uffd5\027\uffd5\001\002\000\010\003\132\030\051\033\056" +
    "\001\002\000\012\003\uffd7\006\uffd7\017\071\027\uffd7\001" +
    "\002\000\010\003\uffd6\006\uffd6\027\uffd6\001\002\000\024" +
    "\002\ufffb\003\ufffb\005\013\006\ufffb\007\034\010\045\011" +
    "\037\027\ufffb\033\043\001\002\000\014\005\013\007\034" +
    "\010\045\011\037\033\043\001\002\000\012\002\ufffc\003" +
    "\ufffc\006\ufffc\027\ufffc\001\002\000\010\003\uffec\006\uffec" +
    "\027\uffec\001\002\000\010\003\uffeb\006\uffeb\027\uffeb\001" +
    "\002\000\010\003\uffe2\006\uffe2\027\uffe2\001\002\000\010" +
    "\003\143\030\051\033\056\001\002\000\010\003\145\017" +
    "\071\026\144\001\002\000\010\003\uffe3\006\uffe3\027\uffe3" +
    "\001\002\000\010\003\147\030\051\033\056\001\002\000" +
    "\010\003\uffe4\006\uffe4\027\uffe4\001\002\000\010\003\151" +
    "\017\071\026\150\001\002\000\010\003\uffe5\006\uffe5\027" +
    "\uffe5\001\002\000\010\003\153\030\051\033\056\001\002" +
    "\000\010\003\uffe6\006\uffe6\027\uffe6\001\002\000\010\003" +
    "\154\017\071\031\155\001\002\000\010\003\uffe7\006\uffe7" +
    "\027\uffe7\001\002\000\010\003\uffe8\006\uffe8\027\uffe8\001" +
    "\002\000\014\005\013\007\034\010\045\011\037\033\043" +
    "\001\002\000\010\003\uffe9\006\uffe9\027\uffe9\001\002\000" +
    "\010\003\uffdd\006\uffdd\027\uffdd\001\002\000\006\003\161" +
    "\033\023\001\002\000\010\003\uffde\006\uffde\027\uffde\001" +
    "\002\000\010\003\163\026\026\031\164\001\002\000\010" +
    "\003\uffdf\006\uffdf\027\uffdf\001\002\000\010\003\uffe0\006" +
    "\uffe0\027\uffe0\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\016\006\013\014\014\001\001\000\016\003\035" +
    "\004\037\005\040\007\041\013\034\014\014\001\001\000" +
    "\004\021\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\011\054\012\056\015\053\016\052\017\060" +
    "\020\051\022\047\023\061\001\001\000\002\001\001\000" +
    "\020\011\054\012\056\015\115\016\052\017\060\020\051" +
    "\023\061\001\001\000\004\010\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\066\023\061\001\001\000\006" +
    "\012\064\023\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\011\054" +
    "\012\056\016\071\017\060\020\051\023\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\054\012\056" +
    "\017\074\020\051\023\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\113\012\056\023\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\054\012\056" +
    "\020\111\023\061\001\001\000\002\001\001\000\010\011" +
    "\107\012\056\023\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\011\054\012" +
    "\056\015\124\016\052\017\060\020\051\023\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\011\054\012\056" +
    "\015\130\016\052\017\060\020\051\023\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\035\007\136" +
    "\013\034\001\001\000\010\003\035\007\135\013\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\011\054\012\056\015\141\016" +
    "\052\017\060\020\051\023\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\011\054\012\056\015\145\016" +
    "\052\017\060\020\051\023\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\011\054\012" +
    "\056\015\151\016\052\017\060\020\051\023\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\035\007\155\013\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	symbolTable = new SymbolTable();

    }



   public int errNo = 0;
   public int warnNo = 0;
   SymbolTable symbolTable;

   public static void main( String[] args)
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
           if ( parser.errNo == 0 && parser.warnNo == 0 )
           		      System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
           		   else
           		      System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo
           		         + " Broj upozorenja: " + parser.warnNo );
      }
      catch( Exception e )
      {
          System.out.println(e);
      }
   }

   public void checkWarnings()
   {
      SymbolNode current = symbolTable.getVariables();
      while ( current != null )
      {
      	Variable var = ( Variable ) current;
      	if ( var.last_def == -1 && var.last_use == -1 )
      	{
      		System.out.println( "Upozorenje: Promenljiva " + var.name +
      			" je deklarisana, ali se nigde ne koristi." );
      		warnNo++;
      	}
      	else if ( var.last_def > var.last_use )
      	{
      		System.out.println( "Upozorenje: Vrednost dodeljena promeljivoj " +
      		    var.name + " u liniji " + var.last_def + " se nigde ne koristi." );
      		warnNo++;
      	}
      	current = current.next;
     }
   }

   public void syntax_error(Symbol cur_token)
   {

   }

   public void report_error(String message, Object info)
   {
   	   System.out.print( message );
   }

   public int getLine()
   {
   	  return (( MPLexer) getScanner()).getLine();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ExpressionList ::= Expression 
            {
              ArrayList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = i;
             System.out.println( "Redukcija po smeni 17." );
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ExpressionList ::= ExpressionList COMMA error 
            {
              ArrayList RESULT =null;
		
             System.out.println("Greska u liniji " + parser.getLine() + ": " +
                        "Nedostaje izraz.");
                        parser.errNo++;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ExpressionList ::= ExpressionList COMMA Expression 
            {
              ArrayList RESULT =null;
		
             System.out.println( "Redukcija po smeni 17." );
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Factor ::= LP error 
            {
              Object RESULT =null;
		
                        System.out.println("Greska u liniji " + parser.getLine() + ": " +
                         "Nedostaje izraz.");
                        parser.errNo++;
                        RESULT = parser.symbolTable.getType( "unknown" );
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Factor ::= LP Expression error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                       System.out.println("Greska u liniji " + parser.getLine() + ": " +
                       	"Nedostaje ')'.");
                       parser.errNo++;
                       RESULT = i;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Factor ::= LP Expression RP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             RESULT = i;
             System.out.println( "Redukcija po smeni 16." );
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Factor ::= CONST 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant k = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT =  new ConstantExpression( k );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Factor ::= ID 
            {
              Object RESULT =null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		      Variable var = parser.symbolTable.getVar( ime );
		      if ( var == null )
		      {
		      	System.out.println( "Greska u liniji " + parser.getLine() +
		      		": promenljiva " + ime + " nije deklarisana.");
		      	RESULT = parser.symbolTable.getType( "unknown" );
		      	parser.errNo++;
		      }
		      else
		      {
		      	RESULT = new VariableExpression( var );
		      	if ( var.last_def == -1 )
		      	{
		      		System.out.println( "Greska u liniji " + parser.getLine() +
		      			": promenljiva " + ime + " nije inicijalizovana.");
		      		parser.errNo++;
		      	}
		        var.last_use = parser.getLine();
		      }
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Term ::= Factor 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = i;
              System.out.println( "Redukcija po smeni 15." );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Term ::= Term DIV error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            if ( !(i.tkind == Type.INT || i.tkind == Type.REAL ) )
               {
                 	System.out.println("Greska u liniji " + parser.getLine() + ": " +
                	   "Operator deljenja se ne moze primeniti nad operandom tipa " + i.name );
                	parser.errNo++;
               }
               System.out.println("Greska u liniji " + parser.getLine() + ": " +
               	"Nekorektan izraz.");
               parser.errNo++;
               if (i.tkind == Type.INT )
               RESULT = parser.symbolTable.getType( "int" );
               else
               RESULT = parser.symbolTable.getType( "real" );
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Term ::= Term DIV Factor 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             if ( !(i1.tkind == Type.INT || i1.tkind == Type.REAL)
                 || !(i2.tkind == Type.REAL || i2.tkind == Type.REAL))
                {
                	System.out.println("Greska u liniji " + parser.getLine() + ": " +
                	   "Operator deljenja se ne moze primeniti nad operandima tipa " +
                	   i1.name + " i " + i2.name );
                	parser.errNo++;
                }
                if ( i1.tkind == Type.INT && i2.tkind == Type.INT){
                RESULT = parser.symbolTable.getType( "int" );
                }else
                RESULT = parser.symbolTable.getType( "real" );
              System.out.println( "Redukcija po smeni 15." );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Term ::= Term MUL error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            if ( !(i.tkind == Type.INT || i.tkind == Type.REAL ) )
               {
                 	System.out.println("Greska u liniji " + parser.getLine() + ": " +
                	   "Operator mnozenja se ne moze primeniti nad operandom tipa " + i.name );
                	parser.errNo++;
               }
               System.out.println("Greska u liniji " + parser.getLine() + ": " +
               	"Nekorektan izraz.");
               parser.errNo++;
               if (i.tkind == Type.INT )
               RESULT = parser.symbolTable.getType( "int" );
               else
               RESULT = parser.symbolTable.getType( "real" );
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Term ::= Term MUL Factor 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             if ( !(i1.tkind == Type.INT || i1.tkind == Type.REAL)
                 || !(i2.tkind == Type.REAL || i2.tkind == Type.REAL))
                {
                	System.out.println("Greska u liniji " + parser.getLine() + ": " +
                	   "Operator mnozenja se ne moze primeniti nad operandima tipa " +
                	   i1.name + " i " + i2.name );
                	parser.errNo++;
                }else
               /* if ( i1.tkind == Type.INT && i2.tkind == Type.INT){
                RESULT = parser.symbolTable.getType( "int" );
                }else
                RESULT = parser.symbolTable.getType( "real" );*/
                RESULT = new Product( i1, i2 );
              System.out.println( "Redukcija po smeni 15." );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ArExpression ::= Term 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               RESULT = i;
               System.out.println( "Redukcija po smeni 14." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArExpression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ArExpression ::= ArExpression MIN error 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            if ( !(i.tkind == Type.INT || i.tkind == Type.REAL ) )
              {
                	System.out.println("Greska u liniji " + parser.getLine() + ": " +
               	   "Operator oduzimanja se ne moze primeniti nad operandom tipa " + i.name );
               	parser.errNo++;
              }
              System.out.println("Greska u liniji " + parser.getLine() + ": " +
              	"Nekorektan izraz.");
              parser.errNo++;
              if (i.tkind == Type.INT )
              RESULT = parser.symbolTable.getType( "int" );
              else
              RESULT = parser.symbolTable.getType( "real" );
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArExpression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ArExpression ::= ArExpression MIN Term 
            {
              Expression RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression i1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if ( !(i1.tkind == Type.INT || i1.tkind == Type.REAL)
                || !(i2.tkind == Type.REAL || i2.tkind == Type.REAL))
               {
               	System.out.println("Greska u liniji " + parser.getLine() + ": " +
               	   "Operator oduzimanja se ne moze primeniti nad operandima tipa " +
               	   i1.name + " i " + i2.name );
               	parser.errNo++;
               }
               if ( i1.tkind == Type.INT || i2.tkind == Type.INT){
               RESULT = new Integer( i1 - i2 );
               }else
               RESULT = new Real( i1 - i2 );
              System.out.println( "Redukcija po smeni 14." );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArExpression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ArExpression ::= ArExpression PLUS error 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            if ( !(i.tkind == Type.INT || i.tkind == Type.REAL ) )
              {
                	System.out.println("Greska u liniji " + parser.getLine() + ": " +
               	   "Operator sabiranja se ne moze primeniti nad operandom tipa " + i.name );
               	parser.errNo++;
              }
              System.out.println("Greska u liniji " + parser.getLine() + ": " +
              	"Nekorektan izraz.");
              parser.errNo++;
              if (i.tkind == Type.INT )
              RESULT = parser.symbolTable.getType( "int" );
              else
              RESULT = parser.symbolTable.getType( "real" );
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArExpression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ArExpression ::= ArExpression PLUS Term 
            {
              Expression RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression i1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if ( !(i1.tkind == Type.INT || i1.tkind == Type.REAL)
                || !(i2.tkind == Type.REAL || i2.tkind == Type.REAL))
               {
               	System.out.println("Greska u liniji " + parser.getLine() + ": " +
               	   "Operator sabiranja se ne moze primeniti nad operandima tipa " +
               	   i1.name + " i " + i2.name );
               	parser.errNo++;
               }else
              /* if ( i1.tkind == Type.INT && i2.tkind == Type.INT){
               RESULT = parser.symbolTable.getType( "int" );
               }else
               RESULT = parser.symbolTable.getType( "real" );*/
               RESULT = new Sum( i1, i2 );
              System.out.println( "Redukcija po smeni 14." );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArExpression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RelOp ::= GREATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RelOp ::= GREAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RelOp ::= NEQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RelOp ::= EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RelOp ::= LESSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RelOp ::= LESS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RelExpression ::= ArExpression 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = i;
              System.out.println( "Redukcija po smeni 12." );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelExpression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RelExpression ::= ArExpression RelOp error 
            {
              Expression RESULT =null;
		
                                 System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                             	"Nekorektan izraz.");
                                             parser.errNo++;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelExpression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RelExpression ::= ArExpression RelOp ArExpression 
            {
              Expression RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression i1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression i2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if ( !(i1.tkind == Type.INT || i1.tkind == Type.REAL)
                || !(i2.tkind == Type.REAL || i2.tkind == Type.REAL))
               {
               	System.out.println("Greska u liniji " + parser.getLine() + ": " +
               	   "Operator se ne moze primeniti nad operandima tipa " +
               	   i1.name + " i " + i2.name );
               	parser.errNo++;
               }
               if ( i1.tkind == Type.INT || i2.tkind == Type.INT){
               RESULT = parser.symbolTable.getType( "int" );
               }else
               RESULT = parser.symbolTable.getType( "real" );
              System.out.println( "Redukcija po smeni 12." );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelExpression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AndExpression ::= AndExpression AND error 
            {
              Expression RESULT =null;
		
                                System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                            	"Nekorektan izraz.");
                                            parser.errNo++;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AndExpression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AndExpression ::= RelExpression 
            {
              Expression RESULT =null;
		
            System.out.println( "Redukcija po smeni 11." );
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AndExpression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AndExpression ::= AndExpression AND RelExpression 
            {
              Expression RESULT =null;
		
             System.out.println( "Redukcija po smeni 11." );
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AndExpression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= Expression OR error 
            {
              Expression RESULT =null;
		
                      System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                  	"Nekorektan izraz.");
                                  parser.errNo++;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expression ::= AndExpression 
            {
              Expression RESULT =null;
		
            System.out.println( "Redukcija po smeni 10." );
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= Expression OR AndExpression 
            {
              Expression RESULT =null;
		
            System.out.println( "Redukcija po smeni 10." );
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Assignment ::= ID error 
            {
              Assignment RESULT =null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              Variable var = parser.symbolTable.getVar( ime );
        		      if ( var == null )
        		      {
        		      	System.out.println( "Greska u liniji " + parser.getLine() +
        		      		": promenljiva " + ime + " nije deklarisana.");
        		      	parser.errNo++;
        		      }
        		      else
        		         var.last_def = parser.getLine();
                      System.out.println("Greska u liniji " + parser.getLine() + ": " +
                      	"Nedostaje '='.");
                      parser.errNo++;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignment",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Assignment ::= ID ASSIGN error 
            {
              Assignment RESULT =null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                Variable var = parser.symbolTable.getVar( ime );
        		      if ( var == null )
        		      {
        		      	System.out.println( "Greska u liniji " + parser.getLine() +
        		      		": promenljiva " + ime + " nije deklarisana.");
        		      	parser.errNo++;
        		      }
        		      else
        		         var.last_def = parser.getLine();
                      System.out.println("Greska u liniji " + parser.getLine() + ": " +
                      	"Nekorektan izraz.");
                      parser.errNo++;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignment",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Assignment ::= ID ASSIGN Expression 
            {
              Assignment RESULT =null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Variable var = parser.symbolTable.getVar( ime );
              		      if ( var == null )
              		      {
              		      	System.out.println( "Greska u liniji " + parser.getLine() +
              		      		": promenljiva " + ime + " nije deklarisana.");
              		      	parser.errNo++;
              		      }
              		      else
              		      {
              		         var.last_def = parser.getLine();
              		         if ( var.type.tkind != i.tkind )
              		         {
              		            System.out.println( "Greska u liniji " + parser.getLine() +
              		      		   ": Neslaganje tipa u naredbi dodele." );
              		      	    parser.errNo++;
              		         }
              		      }
              RESULT = new Assignment( var, i );
              System.out.println( "Redukcija po smeni 9." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignment",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statement ::= Block 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = b;
              System.out.println( "Redukcija po smeni 8." );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Statement ::= WRITE error 
            {
              Object RESULT =null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": " +
                      	"Nedostaje '('.");
                      parser.errNo++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statement ::= WRITE LP error 
            {
              Object RESULT =null;
		
              System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                      	"Nekorektan izraz.");
                      parser.errNo++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statement ::= WRITE LP ExpressionList error 
            {
              Object RESULT =null;
		
              System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                      	"Nedostaje ')'.");
                      parser.errNo++;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statement ::= WRITE LP ExpressionList RP 
            {
              Object RESULT =null;
		
              System.out.println( "Redukcija po smeni 8." );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Statement ::= READ error 
            {
              Object RESULT =null;
		
                                System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                                                    "Nedostaje '('.");
                                                             parser.errNo++;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= READ LP error 
            {
              Object RESULT =null;
		
                                System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                                                    "Nedostaje ime promenljjive.");
                                                             parser.errNo++;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= READ LP NameList error 
            {
              Object RESULT =null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            for(int i=0; i<niz.size(); i++ ){
            String ime = (String) niz.get(i);
            Variable var = parser.symbolTable.getVar( ime );
            		    if ( var == null )
            		    {
            		      	System.out.println( "Greska u liniji " + parser.getLine() +
            		      		": promenljiva " + ime + " nije deklarisana.");
            		      	parser.errNo++;
            		    }
            		    else
            		         var.last_def = parser.getLine();
                        System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                        	"Nedostaje ')'.");
                        parser.errNo++;
            }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= READ LP NameList RP 
            {
              Object RESULT =null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
           for ( int i=0; i<niz.size(); i++ ){
            String ime = ( String ) niz.get(i);
            Variable var = parser.symbolTable.getVar( ime );
           		      if ( var == null )
           		      {
           		      	System.out.println( "Greska u liniji " + parser.getLine() +
           		      		": promenljiva " + ime + " nije deklarisana.");
           		      	parser.errNo++;
           		      }
           		      else
           		         var.last_def = parser.getLine();
           }
              System.out.println( "Redukcija po smeni 8." );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statement ::= Assignment 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment d = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = d;
              System.out.println( "Redukcija po smeni 8." );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statement ::= FOR error 
            {
              Object RESULT =null;
		
                                         System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                                      	"Nedostaje '('.");
                                                      parser.errNo++;
                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= FOR LP error 
            {
              Object RESULT =null;
		
                                         System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                                      	"Nedostaje 1. izraz.");
                                                      parser.errNo++;
                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= FOR LP Expression error 
            {
              Object RESULT =null;
		
                                         System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                                      	"Nedostaje ',' izmedju 1. i 2. izraza.");
                                                      parser.errNo++;
                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= FOR LP Expression COMMA error 
            {
              Object RESULT =null;
		
                                System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                             	"Nedostaje 2. izraz.");
                                             parser.errNo++;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= FOR LP Expression COMMA Expression error 
            {
              Object RESULT =null;
		
                                System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                             	"Nedostaje ',' izmedju 2. i 3. izraza.");
                                             parser.errNo++;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= FOR LP Expression COMMA Expression COMMA error 
            {
              Object RESULT =null;
		
                                System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                             	"Nedostaje 3. izraz.");
                                             parser.errNo++;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= FOR LP Expression COMMA Expression COMMA Expression error 
            {
              Object RESULT =null;
		
                       System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                    	"Nedostaje ')'.");
                                    parser.errNo++;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= FOR LP Expression COMMA Expression COMMA Expression RP Statement 
            {
              Object RESULT =null;
		
              System.out.println( "Redukcija po smeni 8." );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // StatementList ::= Statement 
            {
              Block RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               RESULT = new Block();
               RESULT.addStatement( n );
               System.out.println( "Redukcija po smeni 8." );
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // StatementList ::= StatementList error Statement 
            {
              Block RESULT =null;
		int nnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block nn = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                                	"Nedostaje ';'." );
                                parser.errNo++;
                  RESULT = nn;
                  RESULT.addStatement( n );
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // StatementList ::= StatementList DOTCOMMA Statement 
            {
              Block RESULT =null;
		int nnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block nn = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = nn;
            RESULT.addStatement( n );
            System.out.println( "Redukcija po smeni 7." );
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= BOOL 
            {
              Type RESULT =null;
		
           RESULT = parser.symbolTable.getType( "boolean" );
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= REAL 
            {
              Type RESULT =null;
		
           RESULT = parser.symbolTable.getType( "real" );
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= INT 
            {
              Type RESULT =null;
		
           RESULT = parser.symbolTable.getType( "int" );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NameList ::= ID 
            {
              ArrayList RESULT =null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           RESULT = new ArrayList();
                           RESULT.add( ime );
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NameList ::= NameList COMMA error 
            {
              ArrayList RESULT =null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                          System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                       		"Nedostaje ime promenljive nakon simbola ','" );
                                      	parser.errNo++;
                                      	RESULT = niz;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NameList ::= NameList COMMA ID 
            {
              ArrayList RESULT =null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int imeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = niz;
                RESULT.add( ime );
                System.out.println( "Redukcija po smeni 5." );
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecl ::= Type error 
            {
              Object RESULT =null;
		
                                   System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                               		"Nedostaje deklaracija.");
                                               	parser.errNo++;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarDecl ::= Type error DOTCOMMA 
            {
              Object RESULT =null;
		
                                   System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                               		"Nedostaje ime tipa.");
                                               	parser.errNo++;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarDecl ::= Type NameList error 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nizleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        for ( int i=0; i<niz.size(); i++ )
                          					{
                          					   String ime = ( String ) niz.get(i);

                          					   if ( ! parser.symbolTable.addVar( ime, t ) )
                          					   {
                          					   	 System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                                             			"Promenljiva " + ime + " je vec deklarisana." );
                                      		     parser.errNo++;
                          					   }
                          					}
                                             System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                                             		"Nedostaje simbol ':'." );
                                      		parser.errNo++;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecl ::= Type NameList DOTCOMMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nizleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            for ( int i=0; i<list.size(); i++ )
              					{
              					   String ime = (String) niz.get(i);

              					   if ( ! parser.symbolTable.addVar( ime, t ) )
              					   {
              					   	 System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                                 			"Promenljiva " + ime + " je vec deklarisana." );
                          		     parser.errNo++;
              					   }
              					}
               System.out.println( "Redukcija po smeni 4." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarSection ::= VarDecl 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               RESULT.addStatement( vd );
               System.out.println( "Redukcija po smeni 3." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarSection",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarSection ::= VarSection error 
            {
              Object RESULT =null;
		
               System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                "Nedostaje deklaracija.");
                             parser.errNo++;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarSection",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarSection ::= VarSection VarDecl 
            {
              Object RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               RESULT = vs;
               RESULT.addStatement( vd );
               System.out.println( "Redukcija po smeni 3." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarSection",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Block ::= BEGIN error 
            {
              Block RESULT =null;
		
                            System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                     		"Telo bloka je nekorektno");
                                        parser.errNo++;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Block ::= BEGIN VarSection StatementList error 
            {
              Block RESULT =null;
		int nnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block nn = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = nn;
                            System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                     		"Nedostaje kljucna rec 'end'.");
                                        parser.errNo++;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Block ::= BEGIN VarSection StatementList END 
            {
              Block RESULT =null;
		int nnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block nn = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = nn;
                System.out.println( "Redukcija po smeni 2." );
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= error 
            {
              Block RESULT =null;
		
                           System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                             "Nedostaje rec 'program'.");
                                         parser.errNo++;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= PROGRAM error 
            {
              Block RESULT =null;
		
                           System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                       		"Nedostaje ime promenljive.");
                                       	parser.errNo++;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= PROGRAM ID error 
            {
              Block RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                       		"Telo programa je nekorektno.");
                                       	parser.errNo++;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block start_val = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM ID Block 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               RESULT = b;
               System.out.println( "Redukcija po smeni 1." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

